--------------------------------------------------------
--  File created - Thursday-May-28-2020   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence BOOKS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##TEST"."BOOKS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence BOOK_TYPES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##TEST"."BOOK_TYPES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence CLIENTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##TEST"."CLIENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence JOURNAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##TEST"."JOURNAL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table BOOKS
--------------------------------------------------------

  CREATE TABLE "C##TEST"."BOOKS" 
   (	"ID" NUMBER(*,0), 
	"NAME" VARCHAR2(50 BYTE), 
	"TYPE_ID" NUMBER(*,0), 
	"CNT" NUMBER(*,0) DEFAULT NULL
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BOOK_TYPES
--------------------------------------------------------

  CREATE TABLE "C##TEST"."BOOK_TYPES" 
   (	"ID" NUMBER(*,0), 
	"NAME" VARCHAR2(50 BYTE), 
	"CNT" NUMBER(*,0), 
	"FINE" NUMBER(18,2), 
	"DAY_COUNT" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CLIENTS
--------------------------------------------------------

  CREATE TABLE "C##TEST"."CLIENTS" 
   (	"ID" NUMBER(*,0), 
	"FIRST_NAME" VARCHAR2(20 BYTE), 
	"LAST_NAME" VARCHAR2(20 BYTE), 
	"PATHER_NAME" VARCHAR2(20 BYTE), 
	"PASSPORT_SERIA" VARCHAR2(20 BYTE), 
	"PASSPORT_NUM" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table JOURNAL
--------------------------------------------------------

  CREATE TABLE "C##TEST"."JOURNAL" 
   (	"ID" NUMBER(*,0), 
	"BOOK_ID" NUMBER(*,0), 
	"CLIENT_ID" NUMBER(*,0), 
	"DATE_BEG" TIMESTAMP (6), 
	"DATE_END" TIMESTAMP (6), 
	"DATE_RET" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table RULERS
--------------------------------------------------------

  CREATE TABLE "C##TEST"."RULERS" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" VARCHAR2(50 BYTE), 
	"PASSWORD" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "C##TEST"."USERS" 
   (	"NAME" VARCHAR2(20 BYTE), 
	"PASSWORD" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View BOOKSANDREADERS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "C##TEST"."BOOKSANDREADERS" ("CLINT_ID", "FIRST_NAME", "LAST_NAME", "PATHER_NAME", "NAME") AS 
  SELECT   CLIENTS.ID AS CLINT_ID, 
         CLIENTS.FIRST_NAME,
         CLIENTS.LAST_NAME,
         CLIENTS.PATHER_NAME,
         BOOKS.NAME
FROM     JOURNAL
       INNER JOIN   CLIENTS 
            ON   JOURNAL.CLIENT_ID=  CLIENTS.ID
       INNER JOIN   BOOKS 
            ON   JOURNAL.BOOK_ID=  BOOKS.ID
GROUP BY  CLIENTS.ID, 
         CLIENTS.FIRST_NAME,
         CLIENTS.LAST_NAME,
         CLIENTS.PATHER_NAME,
         BOOKS.ID,
         BOOKS.NAME,
         JOURNAL.DATE_BEG,
         JOURNAL.DATE_END,
         JOURNAL.DATE_RET
HAVING (  JOURNAL.DATE_BEG>=TO_DATE ('1-MAY-2020') AND   JOURNAL.DATE_BEG<=TO_DATE ('11-MAY-2020'))
    OR (  JOURNAL.DATE_END>=TO_DATE ('1-MAY-2020') AND   JOURNAL.DATE_END<=TO_DATE ('11-MAY-2020'))
    OR (  JOURNAL.DATE_RET>=TO_DATE ('1-MAY-2020') AND   JOURNAL.DATE_RET<=TO_DATE ('11-MAY-2020'))
;
--------------------------------------------------------
--  DDL for View COUNTREADERSBOOKS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "C##TEST"."COUNTREADERSBOOKS" ("ID", "FIRST_NAME", "LAST_NAME", "BOOKS_CNT") AS 
  SELECT   CLIENTS.ID, 
         CLIENTS.FIRST_NAME,
         CLIENTS.LAST_NAME,
       COUNT(  JOURNAL.CLIENT_ID) AS BOOKS_CNT
FROM     CLIENTS FULL JOIN  JOURNAL  ON   JOURNAL.CLIENT_ID=  CLIENTS.ID
GROUP BY   CLIENTS.ID,   CLIENTS.FIRST_NAME,   CLIENTS.LAST_NAME,   JOURNAL.CLIENT_ID,JOURNAL.DATE_RET
HAVING JOURNAL.DATE_RET IS NULL
;
REM INSERTING into C##TEST.BOOKS
SET DEFINE OFF;
Insert into C##TEST.BOOKS (ID,NAME,TYPE_ID,CNT) values (1,'R Riordan PJ',1,2);
Insert into C##TEST.BOOKS (ID,NAME,TYPE_ID,CNT) values (2,'Holy book',2,5);
Insert into C##TEST.BOOKS (ID,NAME,TYPE_ID,CNT) values (3,'JR Rowling HP',1,5);
Insert into C##TEST.BOOKS (ID,NAME,TYPE_ID,CNT) values (4,'High N Dry Math',3,2);
Insert into C##TEST.BOOKS (ID,NAME,TYPE_ID,CNT) values (10,'ToDelete2',1,1);
Insert into C##TEST.BOOKS (ID,NAME,TYPE_ID,CNT) values (7,'1BookRussian',1,1);
Insert into C##TEST.BOOKS (ID,NAME,TYPE_ID,CNT) values (9,'ToDelete1',1,1);
REM INSERTING into C##TEST.BOOK_TYPES
SET DEFINE OFF;
Insert into C##TEST.BOOK_TYPES (ID,NAME,CNT,FINE,DAY_COUNT) values (1,'Ordinary',30,10,60);
Insert into C##TEST.BOOK_TYPES (ID,NAME,CNT,FINE,DAY_COUNT) values (2,'Rare',10,50,21);
Insert into C##TEST.BOOK_TYPES (ID,NAME,CNT,FINE,DAY_COUNT) values (3,'Unique',5,300,7);
Insert into C##TEST.BOOK_TYPES (ID,NAME,CNT,FINE,DAY_COUNT) values (22,'check',1,1,1);
REM INSERTING into C##TEST.CLIENTS
SET DEFINE OFF;
Insert into C##TEST.CLIENTS (ID,FIRST_NAME,LAST_NAME,PATHER_NAME,PASSPORT_SERIA,PASSPORT_NUM) values (1,'dasha','petrovna','Andreevna','4141','111111');
Insert into C##TEST.CLIENTS (ID,FIRST_NAME,LAST_NAME,PATHER_NAME,PASSPORT_SERIA,PASSPORT_NUM) values (2,'marina','alekseeva','Vlad','5151','222222');
Insert into C##TEST.CLIENTS (ID,FIRST_NAME,LAST_NAME,PATHER_NAME,PASSPORT_SERIA,PASSPORT_NUM) values (3,'dima','varl','Andreevich','2222','333333');
Insert into C##TEST.CLIENTS (ID,FIRST_NAME,LAST_NAME,PATHER_NAME,PASSPORT_SERIA,PASSPORT_NUM) values (81,'newww','newww','newww','6767','466777');
Insert into C##TEST.CLIENTS (ID,FIRST_NAME,LAST_NAME,PATHER_NAME,PASSPORT_SERIA,PASSPORT_NUM) values (21,'1changed','1changed','0Path','000001','455679');
Insert into C##TEST.CLIENTS (ID,FIRST_NAME,LAST_NAME,PATHER_NAME,PASSPORT_SERIA,PASSPORT_NUM) values (41,'fil0','sam','1Path','000003','000003');
REM INSERTING into C##TEST.JOURNAL
SET DEFINE OFF;
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (101,2,1,to_timestamp('28-MAY-20 02.03.04.073000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-MAY-20 02.03.04.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),null);
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (81,1,2,to_timestamp('21-MAY-20 06.27.49.429000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('21-JUN-20 06.27.49.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('22-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (82,1,2,to_timestamp('21-MAY-20 06.28.06.526000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('21-MAY-20 06.28.06.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),null);
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (83,1,1,to_timestamp('21-MAY-20 06.37.03.884000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('21-JUL-20 06.37.03.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),null);
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (1,4,1,to_timestamp('22-FEB-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('29-FEB-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('23-FEB-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (2,2,2,to_timestamp('01-FEB-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('22-FEB-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('19-FEB-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (102,2,2,to_timestamp('28-MAY-20 02.04.21.793000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-MAY-20 02.04.21.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),null);
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (21,3,1,to_timestamp('22-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('29-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('31-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (22,4,2,to_timestamp('22-APR-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('29-APR-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),null);
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (23,2,2,to_timestamp('01-APR-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('22-APR-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),null);
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (24,1,2,to_timestamp('27-FEB-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('29-APR-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('30-APR-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (41,1,1,to_timestamp('22-FEB-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('29-FEB-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),null);
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (63,7,41,to_timestamp('01-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('30-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),null);
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (65,1,41,to_timestamp('01-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('30-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),null);
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (66,1,41,to_timestamp('01-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('30-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),null);
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (67,2,41,to_timestamp('01-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('30-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),null);
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (69,2,41,to_timestamp('01-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('30-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),null);
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (71,10,41,to_timestamp('01-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('30-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),null);
Insert into C##TEST.JOURNAL (ID,BOOK_ID,CLIENT_ID,DATE_BEG,DATE_END,DATE_RET) values (72,10,41,to_timestamp('01-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('30-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('20-MAY-20 12.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into C##TEST.RULERS
SET DEFINE OFF;
Insert into C##TEST.RULERS (ID,NAME,PASSWORD) values (1,'user','ACBD18DB4CC2F85CEDEF654FCCC4A4D8');
Insert into C##TEST.RULERS (ID,NAME,PASSWORD) values (2,'123','202CB962AC59075B964B07152D234B70');
Insert into C##TEST.RULERS (ID,NAME,PASSWORD) values (3,'admin','21232F297A57A5A743894A0E4A801FC3');
Insert into C##TEST.RULERS (ID,NAME,PASSWORD) values (4,'c','202CB962AC59075B964B07152D234B70');
Insert into C##TEST.RULERS (ID,NAME,PASSWORD) values (5,'adm','B09C600FDDC573F117449B3723F23D64');
REM INSERTING into C##TEST.USERS
SET DEFINE OFF;
Insert into C##TEST.USERS (NAME,PASSWORD) values ('adm','adm');
--------------------------------------------------------
--  DDL for Index BOOKS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##TEST"."BOOKS_PK" ON "C##TEST"."BOOKS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOK_TYPES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##TEST"."BOOK_TYPES_PK" ON "C##TEST"."BOOK_TYPES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CLIENTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##TEST"."CLIENTS_PK" ON "C##TEST"."CLIENTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index JOURNAL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##TEST"."JOURNAL_PK" ON "C##TEST"."JOURNAL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger BOOKS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##TEST"."BOOKS_TRG" 
BEFORE INSERT ON BOOKS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##TEST"."BOOKS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOK_TYPES_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##TEST"."BOOK_TYPES_TRG" 
BEFORE INSERT ON BOOK_TYPES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT BOOK_TYPES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##TEST"."BOOK_TYPES_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CLIENTS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##TEST"."CLIENTS_TRG" 
BEFORE INSERT ON CLIENTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT CLIENTS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##TEST"."CLIENTS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CREATECLIENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##TEST"."CREATECLIENT" 
before insert on CLIENTS 
for each row
DECLARE amount NUMBER;
begin
SELECT COUNT (*)into amount from clients where PASSPORT_NUM=:new.PASSPORT_NUM AND PASSPORT_SERIA=:new.PASSPORT_SERIA;
if (0<amount)
then raise_application_error(-20000,'Not Unique Passport Data');
end if;
end;
/
ALTER TRIGGER "C##TEST"."CREATECLIENT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger DELETEJOURNALBOOKNOTRETURNED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##TEST"."DELETEJOURNALBOOKNOTRETURNED" 
before delete on JOURNAL 
FOR EACH ROW 
begin
if (:old.date_ret is null)
    then 
    raise_application_error(-20000,'Book is not returned');
    end if;
end;
/
ALTER TRIGGER "C##TEST"."DELETEJOURNALBOOKNOTRETURNED" ENABLE;
--------------------------------------------------------
--  DDL for Trigger JOURNAL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##TEST"."JOURNAL_TRG" 
BEFORE INSERT ON JOURNAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT JOURNAL_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##TEST"."JOURNAL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger UPDATEJOURNALDATERET
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##TEST"."UPDATEJOURNALDATERET" 
BEFORE UPDATE ON   JOURNAL 
FOR EACH ROW 
BEGIN
if (:new.DATE_RET<:old.DATE_BEG) 
then
  raise_application_error(-20001,'Wrong returning date');
  END IF;
END;
/
ALTER TRIGGER "C##TEST"."UPDATEJOURNALDATERET" ENABLE;
--------------------------------------------------------
--  DDL for Procedure ADD_BOOK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."ADD_BOOK" (NAME_ IN VARCHAR2, cnt_ IN number,tid IN VARCHAR2)
IS
BEGIN
INSERT INTO BOOKS (ID, NAME,CNT,TYPE_ID) 
VALUES(BOOKS_SEQ.nextval,NAME_, cnt_, tid);
END add_book;

/
--------------------------------------------------------
--  DDL for Procedure ADD_CLIENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."ADD_CLIENT" (FIRST_NAME_ IN VARCHAR2, LAST_NAME_ IN VARCHAR2, PATHER_NAME_ IN VARCHAR2, PASSPORT_SERIA_ IN VARCHAR2, PASSPORT_NUM_ IN VARCHAR2)
IS
BEGIN
INSERT INTO CLIENTS (FIRST_NAME, LAST_NAME, PATHER_NAME, PASSPORT_SERIA, PASSPORT_NUM) 
VALUES(FIRST_NAME_, LAST_NAME_, PATHER_NAME_, PASSPORT_SERIA_, PASSPORT_NUM_);
END add_client;

/
--------------------------------------------------------
--  DDL for Procedure AVERAGEBOOKDURATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."AVERAGEBOOKDURATION" Is 
BEGIN 
for t in (
SELECT BOOKS.ID,BOOKS.NAME, 
COUNT(JOURNAL.BOOK_ID) AS BOOKS_AMOUNT,
SUM(TRUNC(JOURNAL.DATE_RET)- TRUNC( JOURNAL.DATE_BEG)) AS DAYS_D
FROM  BOOKS FULL JOIN  JOURNAL ON   JOURNAL.BOOK_ID=  BOOKS.ID
GROUP BY   BOOKS.ID,  BOOKS.NAME,   JOURNAL.BOOK_ID, JOURNAL.DATE_RET,JOURNAL.DATE_BEG
HAVING JOURNAL.DATE_RET IS NOT NULL)
loop 
IF (t.BOOKS_AMOUNT!=0)THEN 
DBMS_OUTPUT.PUT_LINE('BOOK_ID: '||t.ID||' | BOOK_NAME: '||t.NAME|| ' | AVG_DAYS: '||TRUNC(t.DAYS_D/t.BOOKS_AMOUNT));
ELSE
DBMS_OUTPUT.PUT_LINE('BOOK_ID: '||t.ID||' | BOOK_NAME: '||t.NAME|| ' | AVG_DAYS: '||0);
END IF;
end loop; 
END AverageBookDuration;

/
--------------------------------------------------------
--  DDL for Procedure BOOK_BACK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."BOOK_BACK" (id_ IN VARCHAR2)
IS
BEGIN
UPDATE JOURNAL SET DATE_RET = trunc(sysdate) WHERE ID= id_;
End book_back;

/
--------------------------------------------------------
--  DDL for Procedure CLIENTFEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."CLIENTFEE" (cl_id in NUMBER,c_fee out NUMBER)
IS
BEGIN
  SELECT sum((TRUNC(DATE_RET)-TRUNC(DATE_END))*BOOK_TYPES.FINE) INTO c_fee
FROM JOURNAL 
  INNER JOIN  CLIENTS ON JOURNAL.CLIENT_ID=CLIENTS.ID
  INNER JOIN  BOOKS ON JOURNAL.BOOK_ID=BOOKS.ID
  INNER JOIN  BOOK_TYPES ON BOOKS.TYPE_ID=BOOK_TYPES.ID
GROUP BY  CLIENTS.ID, 
          CLIENTS.FIRST_NAME, 
          CLIENTS.LAST_NAME,
          BOOKS.NAME,
          BOOK_TYPES.NAME,
          BOOK_TYPES.FINE,
          JOURNAL.DATE_END,
          JOURNAL.DATE_RET,
          TRUNC(DATE_RET)-TRUNC(DATE_END)
  HAVING JOURNAL.DATE_RET>JOURNAL.DATE_END AND CLIENTS.ID=cl_id;
  END ClientFee;

/
--------------------------------------------------------
--  DDL for Procedure CLIENT_WHO_FASTER_FIRST
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."CLIENT_WHO_FASTER_FIRST" (book1 NUMBER,book2 IN NUMBER)
IS
BEGIN
for j in 
    (SELECT  CLIENTS.ID, CLIENTS.FIRST_NAME, CLIENTS.LAST_NAME 
    FROM   CLIENTS WHERE 
    exists (SELECT ID,TRUNC(DATE_RET)-TRUNC(DATE_BEG) AS date1 FROM JOURNAL WHERE BOOK_ID=BOOK1 AND CLIENT_ID=CLIENTS.ID 
    AND DATE_RET IS NOT NULL)
    AND 
    exists (SELECT ID,TRUNC(DATE_RET)-TRUNC(DATE_BEG) AS date2 FROM JOURNAL WHERE BOOK_ID=BOOK2 AND CLIENT_ID=CLIENTS.ID
    AND DATE_RET IS NOT NULL)
    AND (SELECT TRUNC(DATE_RET)-TRUNC(DATE_BEG) FROM JOURNAL WHERE BOOK_ID=BOOK1 AND CLIENT_ID=CLIENTS.ID)<
    (SELECT TRUNC(DATE_RET)-TRUNC(DATE_BEG) FROM JOURNAL WHERE BOOK_ID=BOOK2 AND CLIENT_ID=CLIENTS.ID))
LOOP
DBMS_OUTPUT.PUT_LINE('CLIENT_ID: '||j.ID||' | FIRST_NAME: '||j.FIRST_NAME||' | LAST_NAME: '||J.LAST_NAME);
end LOOP;
END Client_Who_Faster_First;

/
--------------------------------------------------------
--  DDL for Procedure CL_FEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."CL_FEE" (id_ IN varchar2, N OUT NUMBER)
IS
begin
SELECT sum((TRUNC(DATE_RET)-TRUNC(DATE_END))*BOOK_TYPES.FINE) 
INTO N FROM JOURNAL INNER JOIN 
CLIENTS ON JOURNAL.CLIENT_ID = CLIENTS.ID INNER JOIN
BOOKS ON JOURNAL.BOOK_ID = BOOKS.ID INNER JOIN
BOOK_TYPES ON BOOKS.TYPE_ID = BOOK_TYPES.ID GROUP BY
CLIENTS.ID,BOOKS.NAME,JOURNAL.DATE_END,JOURNAL.DATE_RET
HAVING JOURNAL.DATE_RET > JOURNAL.DATE_END AND CLIENTS.ID = id_;
End cl_fee;

/
--------------------------------------------------------
--  DDL for Procedure CL_HAVE_BOOKS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."CL_HAVE_BOOKS" (id_ IN varchar2, N OUT NUMBER)
IS
begin
Select Count(*) INTO N from journal where Date_Ret is null and client_id=id_;
End cl_have_books;

/
--------------------------------------------------------
--  DDL for Procedure DEL_BOOK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."DEL_BOOK" (id_ IN VARCHAR2)
IS
BEGIN
DELETE FROM journal WHERE book_ID= id_;
DELETE FROM books WHERE ID= id_;
End del_book;

/
--------------------------------------------------------
--  DDL for Procedure DEL_CLIENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."DEL_CLIENT" (id_ IN VARCHAR2)
IS
BEGIN
DELETE FROM journal WHERE client_ID= id_;
DELETE FROM Clients WHERE ID= id_;
End del_client;

/
--------------------------------------------------------
--  DDL for Procedure LONGEST_TAKEN_BOOK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."LONGEST_TAKEN_BOOK" 
(book1 in NUMBER, longClient out number, longTime out number)
IS
BEGIN
SELECT CLIENT_ID INTO longClient FROM JOURNAL WHERE Book_id=book1 AND DATE_RET IS NOT NULL 
 and TRUNC(DATE_RET)-TRUNC(DATE_BEG)=
(SELECT MAX (TRUNC(DATE_RET)-TRUNC(DATE_BEG)) FROM JOURNAL WHERE Book_id=book1 AND DATE_RET IS NOT NULL);
SELECT MAX (TRUNC(DATE_RET)-TRUNC(DATE_BEG)) INTO longTime FROM JOURNAL WHERE Book_id=book1 AND DATE_RET IS NOT NULL;
END Longest_Taken_Book ;

/
--------------------------------------------------------
--  DDL for Procedure POPULARBOOKS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."POPULARBOOKS" (start_time IN DATE, end_time IN DATE, id_1 OUT NUMBER, id_2 OUT NUMBER, id_3 OUT NUMBER)
IS
testId number;
testCount number;
id1 number;
id2 number;
id3 number;
id1Count number;
id2Count number;
id3Count number;
myDate DATE;
CURSOR get_books_id(start_time DATE, end_time DATE)
IS select date_beg, book_id from journal;
BEGIN
id1 := 0;
id2 := 0;
id3 := 0;
id1Count := 0;
id2Count := 0;
id3Count := 0;
loop
OPEN get_books_id(start_time, end_time);
exit when get_books_id % NOTFOUND;
FETCH get_books_id INTO myDate, testId;
IF (myDate > start_time and myDate < end_time) THEN
select count(*) into testCount from journal where book_id=testId;
IF (testCount > id1Count and testCount > id2Count and testCount > id3Count) THEN
id1Count:=testCount;
id1:=testId;
ELSIF (testCount < id1Count and testCount > id2Count and testCount > id3Count) THEN
id2:=testCount;
id2:=testId;
ELSIF (testCount < id1Count and testCount < id2Count and testCount > id3Count) THEN
id3:=testCount;
id3:=testId;
END IF;
END IF;
CLOSE get_books_id;
end loop;
id_1 := id1;
id_2 := id2;
id_3 := id3;
DBMS_OUTPUT.put_line('RESULTS: 1: '|| id_1 || ' 2: ' || id_2 || ' 3: ' || id_3);
END PopularBooks;

/
--------------------------------------------------------
--  DDL for Procedure UPD_B_COUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."UPD_B_COUNT" (id_ IN VARCHAR2, cnt_ in number)
IS
BEGIN
UPDATE BOOKS SET CNT =cnt_ WHERE ID=id_;
End upd_b_count;

/
--------------------------------------------------------
--  DDL for Procedure UPD_CLIENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."UPD_CLIENT" (id_ IN VARCHAR2, FIRST_NAME_ IN VARCHAR2, LAST_NAME_ IN VARCHAR2)
IS
BEGIN
UPDATE clients SET FIRST_NAME = FIRST_NAME_ WHERE ID= id_;
UPDATE clients SET LAST_NAME = LAST_NAME_ WHERE ID= id_;
End upd_client;

/
--------------------------------------------------------
--  DDL for Procedure UPD_CLIENT_PASS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##TEST"."UPD_CLIENT_PASS" (id_ IN VARCHAR2, PASSPORT_SERIA_ IN VARCHAR2, PASSPORT_NUM_ IN VARCHAR2)
IS
BEGIN
UPDATE clients SET PASSPORT_SERIA = PASSPORT_SERIA_ WHERE ID= id_;
UPDATE clients SET PASSPORT_NUM = PASSPORT_NUM_ WHERE ID= id_;
End upd_client_PASS;

/
--------------------------------------------------------
--  Constraints for Table CLIENTS
--------------------------------------------------------

  ALTER TABLE "C##TEST"."CLIENTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."CLIENTS" MODIFY ("FIRST_NAME" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."CLIENTS" MODIFY ("LAST_NAME" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."CLIENTS" MODIFY ("PASSPORT_SERIA" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."CLIENTS" MODIFY ("PASSPORT_NUM" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."CLIENTS" ADD CONSTRAINT "CLIENTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##TEST"."CLIENTS" MODIFY ("PATHER_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BOOK_TYPES
--------------------------------------------------------

  ALTER TABLE "C##TEST"."BOOK_TYPES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."BOOK_TYPES" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."BOOK_TYPES" MODIFY ("CNT" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."BOOK_TYPES" MODIFY ("FINE" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."BOOK_TYPES" MODIFY ("DAY_COUNT" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."BOOK_TYPES" ADD CONSTRAINT "BOOK_TYPES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "C##TEST"."USERS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."USERS" MODIFY ("PASSWORD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BOOKS
--------------------------------------------------------

  ALTER TABLE "C##TEST"."BOOKS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."BOOKS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."BOOKS" MODIFY ("TYPE_ID" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."BOOKS" ADD CONSTRAINT "BOOKS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table RULERS
--------------------------------------------------------

  ALTER TABLE "C##TEST"."RULERS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."RULERS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table JOURNAL
--------------------------------------------------------

  ALTER TABLE "C##TEST"."JOURNAL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."JOURNAL" MODIFY ("BOOK_ID" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."JOURNAL" MODIFY ("CLIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."JOURNAL" MODIFY ("DATE_BEG" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."JOURNAL" MODIFY ("DATE_END" NOT NULL ENABLE);
  ALTER TABLE "C##TEST"."JOURNAL" ADD CONSTRAINT "JOURNAL_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BOOKS
--------------------------------------------------------

  ALTER TABLE "C##TEST"."BOOKS" ADD CONSTRAINT "FK_BOOKS_BOOK_TYPES" FOREIGN KEY ("TYPE_ID")
	  REFERENCES "C##TEST"."BOOK_TYPES" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table JOURNAL
--------------------------------------------------------

  ALTER TABLE "C##TEST"."JOURNAL" ADD CONSTRAINT "FK_JOURNAL_BOOKS" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "C##TEST"."BOOKS" ("ID") ENABLE;
  ALTER TABLE "C##TEST"."JOURNAL" ADD CONSTRAINT "FK_JOURNAL_CLIENTS" FOREIGN KEY ("CLIENT_ID")
	  REFERENCES "C##TEST"."CLIENTS" ("ID") ENABLE;
